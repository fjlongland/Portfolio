from fastapi import FastAPI, Response, status, HTTPException
from fastapi.params import Body
from pydantic import BaseModel
from typing import Optional
from random import randrange
import psycopg2;
from psycopg2.extras import RealDictCursor
import time



#/////////////////////////////////////////////////////////////////////////////
#///Full documentation generated by fastAPI at : http://127.0.0.1:8000/docs///
#/////////////////////////////////////////////////////////////////////////////
#use http://127.0.0.1:8000/redoc for a reformatted version of this documentation


#///////////////////////////  CLASSES  ////////////////////////////////////////////////////////////


app = FastAPI()

class Post(BaseModel): #post class to handle validation of posts
    title: str
    content: str
    published: bool = True


#///////////////  DATABASE CONNECTION /////////////////////////////////////////////////////////////////////
while True:
    try:
        conn = psycopg2.connect(host = 'localhost', dbname = 'API(tut)_DB', user = 'postgres', password = '4u2nV@5302P', cursor_factory=RealDictCursor)
        cursor = conn.cursor()
        print("Connection Successful!")
        break
    except Exception as error:
        print("Connection Failed, Too Bad")
        print("Error: ", error)
        time.sleep(2)




#add an array of posts jus for testing while i dont have a database yet
#my_posts =[{"title": "Title of post 1", "content": "Content of post 1", "published": True, "rating": 1, "id": 11111}, 
#           {"title": "Title of post 2", "content": "Content of post 2", "published": False, "rating": None, "id": 11112}]





#///////////////////////////// FUNCTIONS ///////////////////////////////////////////////////////////////////////////

def findPost(id):  # simple for loop to find post with ID: id 
    try:
        cursor.execute("""SELECT * FROM posts WHERE id = %s""", (str(id)))   
        p = cursor.fetchone()
    except:
        p = None
    return p

#def findIndex(id):     # function to delete a post when given a specific post ID
    for i, p in enumerate(my_posts): #this functionality wil change when we start saving posts in an actual databaase
        if p["id"] == id:
            return i
        

#/////////////////////////////  OPERATIONS  ///////////////////////////////////////////////////////////////////

@app.get("/") #decorator references app(instance of fats API you are using) and specifys file path to the changes you are making
async def root(): #init the function and specify its name
    return{"message:" "Hi There trveler!"} #code that runs in the function and makes changes at specified destiantion


@app.get("/post")
def get_posts():
    cursor.execute("""SELECT * FROM posts""")
    posts = cursor.fetchall()
    return{"data": posts}#in postman now displays whole array as json array

@app.post("/post", status_code=status.HTTP_201_CREATED)
def create_post(post: Post, response: Response):
    cursor.execute("""INSERT INTO posts (title, content, published) VALUES (%s, %s, %s) RETURNING *""", (post.title, post.content, post.published))
    new_post = cursor.fetchone()
    conn.commit()
    return {"data": new_post}#return the whole post to display on postman



@app.get("/post/{id}")
def get_post(id: int, response: Response):  #you can validage the input like this to make shure an int has been input(wors for all data types)
    print(id)                               #make a response variable
    wpost = findPost(id)  #calls function to find post with ID: id
    if wpost == None:
        print("KYS")
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"Post with ID: {id} was not found") #this does the same thing but better than the commented code V
        #response.status_code = status.HTTP_404_NOT_FOUND  #this is how you ste the status code to be accurate
        #return{"message": f"Post with ID: {id} was not found"}
    else:
        print(wpost)  
    return{"post": wpost}


@app.delete("/post/{id}") #pretty simple to delete  post at this point, especially as posts are just saved in an array
def delete_post(id: int):
    try:
        cursor.execute(""" DELETE FROM posts WHERE id = %s""", (str(id)))
        conn.commit()
    except:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND)
    return Response(status_code=status.HTTP_204_NO_CONTENT)


@app.put("/post/{id}") #Functionality for updating posts
def update_post(id: int, post: Post):
    cursor.execute("""UPDATE posts SET title = %s, content = %s, published = %s WHERE id = %s RETURNING *""", (post.title, post.content, post.published, (str(id))))
    uPost = cursor.fetchone()
    if uPost == None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND)
    else:
        conn.commit()
    return{"data": uPost}

#///////////////////////////////  NOTES  //////////////////////////////////////////////////////////

#uvicorn API.APP.main:app --reload